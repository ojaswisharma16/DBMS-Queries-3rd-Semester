A Subquery or Inner query or a Nested query is a query within another SQL query and embedded within the WHERE clause.

A subquery is used to return data that will be used in the main query as a condition to further restrict the data to be retrieved.

Subqueries can be used with the SELECT, INSERT, UPDATE, and DELETE statements along with the operators like =, <, >, >=, <=, IN, BETWEEN, etc.

There are a few rules that subqueries must follow âˆ’

i) Subqueries must be enclosed within parentheses.

ii) A subquery can have only one column in the SELECT clause, unless multiple columns are in the main query for the subquery to compare its selected columns.

iii) An ORDER BY command cannot be used in a subquery, although the main query can use an ORDER BY. The GROUP BY command can be used to perform the same function as the ORDER BY in a subquery.

iv) Subqueries that return more than one row can only be used with multiple value operators such as the IN operator.

v) The SELECT list cannot include any references to values that evaluate to a BLOB, ARRAY, CLOB, or NCLOB.

vi) A subquery cannot be immediately enclosed in a set function.

vii) The BETWEEN operator cannot be used with a subquery. However, the BETWEEN operator can be used within the subquery.





1)Subqueries with the SELECT Statement----

Syntax-
SELECT column_name [, column_name ]
FROM   table1 [, table2 ]
WHERE  column_name OPERATOR
   (SELECT column_name [, column_name ]
   FROM table1 [, table2 ]
   [WHERE])
   
Example-
SELECT * 
   FROM CUSTOMERS 
   WHERE ID IN (SELECT ID 
         FROM CUSTOMERS 
         WHERE SALARY > 4500) ;
         
         
2)Subqueries with the INSERT Statement----

Syntax-
INSERT INTO table_name [ (column1 [, column2 ]) ]
   SELECT [ *|column1 [, column2 ]
   FROM table1 [, table2 ]
   [ WHERE VALUE OPERATOR ]
   
   
Example-
INSERT INTO CUSTOMERS_BKP
   SELECT * FROM CUSTOMERS 
   WHERE ID IN (SELECT ID 
   FROM CUSTOMERS) ;
   
3)Subqueries with the UPDATE Statement---

 Syntax-
 UPDATE table
SET column_name = new_value
[ WHERE OPERATOR [ VALUE ]
   (SELECT COLUMN_NAME
   FROM TABLE_NAME)
   [ WHERE) ]
   
 Example-  
  UPDATE CUSTOMERS
   SET SALARY = SALARY * 0.25
   WHERE AGE IN (SELECT AGE FROM CUSTOMERS_BKP
      WHERE AGE >= 27 );
      
      
      
4)Subqueries with the DELETE Statement----

 Syntax-
 DELETE FROM TABLE_NAME
[ WHERE OPERATOR [ VALUE ]
   (SELECT COLUMN_NAME
   FROM TABLE_NAME)
   [ WHERE) ]
   
 Example-
 DELETE FROM CUSTOMERS
   WHERE AGE IN (SELECT AGE FROM CUSTOMERS_BKP
      WHERE AGE >= 27 );
      
      
      
      
      
      
   # USING UNION , INTERSECT AND MINUS CLAUSE----   
      
      
      1)UNION : The UNION operator is used to combine the result-set of two or more SELECT statements Tables of both the select statement must have the same number of columns with similar data types. It eliminates duplicates.

Syntax :
SELECT column_name(s) FROM table_name1
UNION
SELECT column_name(s) FROM table_name2

Example :
SELECT emp_Name FROM Employees_india
UNION
SELECT emp_Name FROM Employees_USA




2)INTERSECT: INTERSECT allows combining results of two or more select queries. If a record exists in one query and not in the other, it will be omitted from the INTERSECT results.

Syntax :
select field1, field2, . field_n from tables INTERSECT select field1, field2, . field_n from tables;

Example :
select salary from employee INTERSECT select salary from manager;




3) MINUS : SQL MINUS returns all rows in the first query that are not returned in the second query. Each statement must have the same number of fields in the result sets with similar data types.

Syntax :
Select field1, field2, . field_n from tables
MINUS
select field1, field2, . field_n from tables;

Example :
Select salary from employee
MINUS
select salary from manager
